marketo.marketoEndpoint     =https://945-SMH-086.mktoapi.com/soap/mktows/2_2?WSDL
marketo.marketoUserId       =californiaacademyofsciences1_1297519852CC396BBAAC41
marketo.marketoSecretKey    =96207525314004195522CCCC339966CDBBAABC737343
marketo.marketoQnameUrl     =http://www.marketo.com/mktows/
marketo.marketoQnameName    =MktMktowsApiService

marketo.dataSourceDriver    =net.sourceforge.jtds.jdbc.Driver
marketo.dataSourceUrl       =jdbc:jtds:sqlserver://warehouse-prod:1433/AcademyContacts
marketo.dataSourceUser      =Jasper
marketo.dataSourcePassword  =J@sp3r4321
velocityLogLocation=/opt/apache-tomcat-7.0.59/logs/velocity.log

marketo.emailReportRecipients =mikemcelligott@gmail.com;Mike McElligott,rmendez@calacademy.org;Rafael Mendez,JLemus@calacademy.org;Jaime Lemus,CJeyaraj@calacademy.org;Carola Jeyaraj
marketo.duplicatesReportRecipients =mikemcelligott@gmail.com;Mike McElligott,rmendez@calacademy.org;Rafael Mendez,JLemus@calacademy.org;Jaime Lemus,CJeyaraj@calacademy.org;Carola Jeyaraj

marketo.emailReportSql=select objectType as type, status, count(*) as total from marketostatus \
                        where lastUpdated > dateadd(dd, -1,  getdate())  and objectType <> 'Admin' \
                        and (error is null or error <> 'Associated Person not found with key field(s)') \
                        group by objectType, status order by objectType

marketo.emailReportLeads=select count(*) from contacts where id >= (select min(id) from contacts where dateCreated > dateadd(dd, -1,  getdate()))
marketo.emailReportNewFailures =select count(distinct key1) from MarketoStatus a where \
                                  not exists (select * from MarketoStatus b where a.key1 = b.key1 and a.objectType = b.objectType \
                                  and a.key2 = b.key2 and b.lastUpdated < dateadd(dd, -1, getdate())) \
                                  and status = 'FAILED' \
                                  and lastUpdated > dateadd(dd, -1, getdate())

marketo.emailReportDuplicatesSql=select email from MarketoDuplicates

marketo.sql        =select a.id, a.lastName, a.firstName, '' as job, '' as company, a.email, b.name as source, \
                                c.name as status, e.name as subscriptions             \
                                from contacts a                                                         \
                                inner join sources b on a.sourceId = b.id                               \
                                inner join status c on a.statusId = c.id                                \
                                inner join ContactsSubscriptions d on a.id = d.contactId                \
                                inner join subscriptions e on e.id = d.subscriptionId                   \
                                where a.lastUploaded is null        \
                             order by a.email
marketo.batchRows           =20000
marketo.columnNames         =Last Name,First Name,Job Title,Company Name,Email Address
marketo.columnIndices       =2,3,4,5,6
marketo.columnListName      =subscriptions
marketo.columnProgramName   =
marketo.columnCampaignName  =
marketo.columnLastUploaded  =lastUploaded
marketo.useSqlColumnNames   =false

marketo.syncMultipleLeads.marketoEndpoint=https://945-SMH-086.mktoapi.com/soap/mktows/2_2?WSDL
marketo.syncMultipleLeads.columnEmail=Email
marketo.syncMultipleLeads.sql=\
      select \
        a.lastName as LastName, \
        a.firstName as FirstName, \
        a.email as Email, \
        a.title as Salutation, \
        a.jobTitle as Title, \
        a.company as Company, \
        c.name as Status, \
        a.zip as PostalCode, \
        a.phone as Phone, \
        a.city as City, \
        a.State, \
        a.Country, \
        a.School, \
        a.Birthdate as DateofBirth, \
        b.constituentID, \
        b.visualID, \
        b.category, \
        b.membershipStanding, \
        b.expirationDate, \
        b.timesRenewed, \
        a.joinDate as constituentJoinDate, \
        b.membershipProgram, \
        b.dropDate, \
        b.lastGiftAmount, \
        b.highestGiftAmount, \
        b.lastGiftDate, \
        b.lastGiftFundDescription \
      FROM contacts a \
        LEFT JOIN work_lead_ext b ON a.email = b.email \
        LEFT OUTER JOIN status c on c.id=a.statusId \
      WHERE a.worker = ?
marketo.syncMultipleLeads.sqlBeforeCreates=\
  update contacts set lastUploaded = '1970-01-01', worker = ? where id in \
  (select top 100 a.id from contacts a left join MarketoStatus b on a.email = b.key1 and b.objectType = 'Lead' where worker is null and lastUploaded is null and b.objectType is null)
marketo.syncMultipleLeads.sqlBefore=\
  update contacts set lastUploaded = '1970-01-01', worker = ? where id in \
  (select top 100 a.id from contacts a where worker is null and lastUploaded is null)
marketo.syncMultipleLeads.sqlBeforeSingle=\
  update contacts set lastUploaded = '1970-01-01', worker = ? where id = ?

part2=and email not in (select key1 from MarketoStatus where objectType = 'Lead' and status IN ('CREATED', 'UPDATED'))
marketo.syncMultipleLeads.sqlAfterSuccess=\
  update contacts set lastUploaded = GETDATE(), worker = null where worker = ?
marketo.syncMultipleLeads.sqlAfterFailure=\
  update contacts set lastUploaded = null, worker = null where worker = ?
marketo.syncMultipleLeads.sqlInsertStatus=\
  insert into MarketoStatus (objectType, status, error, key1, key2, lastUpdated) values (?, ?, ?, ?, ?, getdate())
marketo.syncMultipleLeads.sqlCountRecordsToProcess=\
  select count(distinct a.email) from contacts a \
          LEFT JOIN MarketoStatus b on a.email = b.key1 \
          AND b.objectType = 'Lead' AND b.status IN ('CREATED', 'UPDATED') \
          WHERE b.key1 IS NULL \
          AND a.email IS NOT NULL AND a.email <> ''

marketo.updateBadLeads.sql=select \
                             email, \
                             null as constituentID, \
                             null as visualID, \
                             null as membershipProgram, \
                             null as membershipStanding, \
                             null as constituentJoinDate, \
                             null as category \
                             FROM MarketoEmails WHERE worker = ?;
marketo.updateBadLeads.sqlBefore=\
  update MarketoEmails set lastUploaded = '1970-01-01', worker = ? where email in \
  (select top 100 a.email from MarketoEmails a left join contacts b on a.email = b.email where b.email is null and a.worker is null and a.lastUploaded is null)

marketo.updateBadLeads.sqlAfterSuccess=\
    update MarketoEmails set lastUploaded = GETDATE(), worker = null where worker = ?
marketo.updateBadLeads.sqlAfterFailure=\
  update MarketoEmails set lastUploaded = null, worker = null where worker = ?

marketo.syncVisitations.keys=EmailAddress,UsageID
marketo.syncVisitations.attributes=Quantity,VisitDate,VisitType,AccessCodeGroup,VisualID
marketo.syncVisitations.marketoKeys=EmailAddress,UsageID
marketo.syncVisitations.sqlGlobalPrepare=execute sp_buildVisitations
marketo.syncVisitations.sqlInsertStatus=\
  insert into MarketoStatus (objectType, status, error, key1, key2, lastUpdated) values (?, ?, ?, ?, ?, getdate())
marketo.syncVisitations.sqlWorkerBefore=\
    update top(100) work_visitations set worker = ? where worker IS NULL
marketo.syncVisitations.sqlWorker=\
  select AccessCodeGroupName as AccessCodeGroup, a.email as EmailAddress, qty as Quantity, dayused as VisitDate, \
  accessCodeName as VisitType, VisualID, UsageID from GalaxyScans a \
  INNER JOIN work_visitations b on a.email = b.email AND cast(a.UsageId AS varchar) = b.secondary \
  where worker = ?

marketo.syncVisitations.sqlWorkerAfterSuccess=\
  update work_visitations set worker = 'COMPLETE' where worker = ?
marketo.syncVisitations.sqlWorkerAfterFailure=\
  update work_visitations set worker = null where worker = ?
marketo.syncVisitations.sqlCountRecordsToProcess=\
  select count(*) from work_visitations WHERE worker  <> 'COMPLETE' OR worker IS NULL

marketo.syncConstituents.marketoKeys=EmailAddress,VisualID
marketo.syncConstituents.keys=EmailAddress,VisualID
marketo.syncConstituents.attributes=Category,ConstituentID,DropDate,ExpirationDate, HighestGiftAmount, JoinDate, LastGiftAmount,LastGiftDate, LastGiftFundDescription,MembershipProgram,MembershipStanding,TimesRenewed,TotalGiftAmount,WealthScore,WealthScoreCategory
marketo.syncConstituents.sqlGlobalPrepare=execute sp_buildConstituents
marketo.syncConstituents.sqlWorkerBefore=\
    update top(100) work_constituents set worker = ? where worker IS NULL
marketo.syncConstituents.sqlWorker=select membershipLevel as Category,ConstituentEmailAddress, ConstituentID, DropDate, \
  ConstituentEmailAddress as EmailAddress, ExpirationDate, HighestGiftAmount, JoinDate, LastGiftAmount, \
  LastGiftDate, LastGiftFundDescription, MembershipProgram, MembershipStanding, TimesRenewed, TotalGiftAmount, \
  VisualID, WealthScore, WealthScoreCategory FROM constituents a \
  INNER JOIN work_constituents b on a.constituentEmailAddress = b.email AND a.visualId = b.secondary \
  WHERE worker = ?

marketo.syncConstituents.sqlWorkerAfterSuccess=\
  update work_constituents set worker = 'COMPLETE' where worker = ?
marketo.syncConstituents.sqlWorkerAfterFailure=\
  update work_constituents set worker = null where worker = ?
marketo.syncConstituents.sqlInsertStatus=\
  insert into MarketoStatus (objectType, status, error, key1, key2, lastUpdated) values (?, ?, ?, ?, ?, getdate())
marketo.syncConstituents.sqlCountRecordsToProcess=\
  select count(*) from work_constituents WHERE worker is null or worker  <> 'COMPLETE'

marketo.syncOrders.keys=EmailAddress,OrderID
marketo.syncOrders.attributes=Agency,OrderDate,OrderTotal
marketo.syncOrders.marketoKeys=EmailAddress,OrderID
marketo.syncOrders.sqlGlobalPrepare=execute sp_buildOrders
marketo.syncOrders.sqlInsertStatus=\
  insert into MarketoStatus (objectType, status, error, key1, key2, lastUpdated) values (?, ?, ?, ?, ?, getdate())
marketo.syncOrders.sqlWorkerBefore=\
    update top(100) work_orders set worker = ? where worker IS NULL
marketo.syncOrders.sqlWorker04272014=select a.email as EmailAddress, OrderID, [Purchase Date] as OrderDate, [Purchase Amount] as OrderTotal, \
   AgencyDescription as Agency,null as OrderSubtotal,null as OrderTax,null as DiscountName \
   from GalaxyOrders a INNER JOIN contacts b ON a.email = b.email WHERE b.worker = ?
marketo.syncOrders.sqlWorker=select AgencyDescription as Agency,EmailAddress,OrderDate,OrderID,pluPrice as OrderTotal from GalaxyOrders a \
  INNER JOIN work_orders b on a.EmailAddress = b.email AND CAST(a.orderId AS VARCHAR) = b.secondary \
  WHERE b.worker = ?
marketo.syncOrders.sqlWorkerAfterSuccess=\
  update work_orders set worker = 'COMPLETE' where worker = ?
marketo.syncOrders.sqlWorkerAfterFailure=\
  update work_orders set worker = null where worker = ?
marketo.syncOrders.sqlCountRecordsToProcess=\
  select count(*) from work_orders WHERE worker is null or worker  <> 'COMPLETE'

marketo.syncOrderDetails.keys=EmailAddress,VisualID
marketo.syncOrderDetails.attributes=PLUName,PLUItemGroup,PLUPrice,DiscountName,OrderDate,OrderID,Quantity
marketo.syncOrderDetails.marketoKeys=EmailAddress,VisualID
marketo.syncOrderDetails.sqlGlobalPrepare=execute sp_buildOrderDetails
marketo.syncOrderDetails.sqlInsertStatus=\
    insert into MarketoStatus (objectType, status, error, key1, key2, lastUpdated) values (?, ?, ?, ?, ?, getdate())
marketo.syncOrderDetails.sqlWorkerBefore=\
    update top(100) work_order_details set worker = ? where worker IS NULL
marketo.syncOrderDetails.sqlWorker=\
select name as DiscountName,EmailAddress,OrderDate,OrderID,PLUItemGroup,PLUName,PLUPrice,Quantity,VisualID from GalaxyOrderDetail a \
INNER JOIN work_order_details b on a.EmailAddress = b.email AND cast(visualId AS VARCHAR) = b.secondary WHERE b.worker = ?

marketo.syncOrderDetails.sqlWorkerAfterSuccess=\
  update work_order_details set worker = 'COMPLETE' where worker = ?
marketo.syncOrderDetails.sqlWorkerAfterFailure=\
  update work_order_details set worker = null where worker = ?
marketo.syncOrderDetails.sqlCountRecordsToProcess=\
  select count(*) from work_order_details WHERE worker is null or worker <> 'COMPLETE'

marketo.syncEvents.keys=EmailAddress,VisualID
marketo.syncEvents.attributes=EventName,EventDate,Attended,Amount,type as TicketType,EventCategory,EventDonation,EventCapacity,UnitQuantity,TotalGiftAmount
marketo.syncEvents.marketoKeys=EmailAddress,VisualID
marketo.syncEvents.sqlGlobalPrepare=execute sp_buildEvents
marketo.syncEvents.sqlInsertStatus=\
  insert into MarketoStatus (objectType, status, error, key1, key2, lastUpdated) values (?, ?, ?, ?, ?, getdate())
marketo.syncEvents.sqlWorkerBefore=\
    update top(100) work_events set worker = ? where worker IS NULL
marketo.syncEvents.sqlWorker=\
  select EventName,EventDate,Attended,Amount,type as TicketType,EventCategory,EventDonation,EventCapacity,UnitQuantity,TotalGiftAmount,emailAddress from event a \
  INNER JOIN work_events b on a.emailAddress = b.email AND cast(a.visualId) = b.secondary a.WHERE b.worker = ?
marketo.syncEvents.sqlWorkerAfterSuccess=\
UPDATE work_events set worker = 'COMPLETE' where worker = ?
marketo.syncEvents.sqlWorkerAfterFailure=\
UPDATE work_events set worker = null where worker = ?
marketo.syncEvents.sqlCountRecordsToProcess=\
  select count(*) from work_events WHERE worker is null or worker <> 'COMPLETE'