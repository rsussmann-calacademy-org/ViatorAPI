<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
    <mvc:annotation-driven />
    <mvc:resources mapping="/resources/**" location="/resources/" />

    <context:component-scan base-package="co.launchable.api.email,co.launchable.api.marketo,co.launchable.api.jobs"/>

    <context:property-placeholder location="classpath:jdbc-test.properties"/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="jobStatusService" class="co.launchable.api.jobs.JobStatusServiceImpl"/>

    <bean id="dataSourceContacts" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.contacts.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.contacts.url}" />
        <property name="user" value="${jdbc.contacts.username}" />
        <property name="password" value="${jdbc.contacts.password}" />
        <property name="dataSourceName" value="${jdbc.contacts.url}"/>
        <property name="minPoolSize" value="0" />
        <property name="maxPoolSize" value="8" />
        <property name="maxStatements" value="100" />
        <property name="idleConnectionTestPeriod" value="3000" />
        <property name="loginTimeout" value="300" />
        <property name="checkoutTimeout" value="60000"/>
        <property name="maxIdleTimeExcessConnections" value="120000"/>
        <property name="debugUnreturnedConnectionStackTraces" value="true"/>
    </bean>

    <bean id="marketoApiConfig" class="co.launchable.api.marketo.MarketoApiConfig">
        <property name="marketoServiceQnameUrl" value="http://www.marketo.com/mktows/"/>
        <property name="marketoServiceQnameName" value="MktMktowsApiService"/>
        <property name="marketoUserId" value="californiaacademyofsciences1_1297519852CC396BBAAC41"/>
        <property name="marketoSecretKey" value="96207525314004195522CCCC339966CDBBAABC737343"/>
        <property name="marketoEndpoint" value="https://945-SMH-086.mktoapi.com/soap/mktows/2_2?WSDL"/>
    </bean>

    <bean id="marketoApiConfigRest" class="co.launchable.api.marketo.MarketoRestApi">
        <property name="clientId" value="3ef87869-8817-4145-8a29-f09e722555fb"/>
        <property name="clientSecret" value="I8FHT0vhIuCRRT9EtDxTDEyDjFQcHCLF"/>
        <property name="clientUser" value="api-synchronization@calacademy.org"/>
        <property name="clientToken" value="33f055b4-25ee-46cb-9cb3-e10ea9c2b1dc:sj"/>
        <property name="restUrlIdentity" value="https://945-SMH-086.mktorest.com/identity"/>
        <property name="restUrlEndpoint" value="https://945-SMH-086.mktorest.com/rest"/>
    </bean>

    <bean id="apiGetDeletedLeads" class = "co.launchable.api.marketo.ApiGetDeletedLeads">
        <property name="dataSource" ref="dataSourceContacts"/>
    </bean>

    <bean id="apiListOpportunities" class = "co.launchable.api.marketo.ApiListOpportunities"/>
    <bean id="apiDeleteOpportunities" class = "co.launchable.api.marketo.ApiDeleteOpportunities"/>
    <bean id="apiMergeDuplicateLeads" class = "co.launchable.api.marketo.ApiMergeDuplicateLeads">
        <property name="dataSource" ref="dataSourceContacts"/>
    </bean>

    <bean id="apiSyncUpdatedInterests" class = "co.launchable.api.marketo.ApiSyncUpdatedInterests">
        <property name="calculateWithExternalOptOuts" value="false"/>
        <property name="calculateWithExternalOptIns" value="false"/>
        <property name="sendNulls" value="false"/>

        <property name="sql"><value>
            SELECT TOP 100 b.email, c.code, d.optInEnews, d.optInLectures, d.optInTeachers, d.optInNightlife from contactsInterests a
                inner join contacts b on a.contactid = b.id
                inner join interests c on a.interestid = c.id
                left join interestOptOut d on b.email = d.email
            WHERE a.lastUploaded IS NULL ORDER BY b.email
        </value></property>
        <!--
        <property name="sql"><value>
            select top 200 a.email, c.code, d.optInEnews, d.optInLectures, d.optInTeachers, d.optInNightlife FROM contacts a
                LEFT JOIN contactsInterests b ON a.id = b.contactId
                LEFT JOIN interestOptOut d ON a.email = d.email
                LEFT JOIN interests c ON b.interestId = c.id
            WHERE a.lastUploaded = '1969-01-01' and a.luInterests is null
        </value></property>
-->
        <!--
        <property name="sql"><value>
            select top 200 a.email, c.code, d.optInEnews, d.optInLectures, d.optInTeachers, d.optInNightlife FROM interestNulls a
            LEFT JOIN contacts e on a.email = e.email
            LEFT JOIN contactsInterests b ON e.id = b.contactId
            LEFT JOIN interestOptOut d ON a.email = d.email
            LEFT JOIN interests c ON b.interestId = c.id
            WHERE a.lastUploaded is null
        </value></property>
        -->
        <!--
        <property name="sql">
            <value>
                SELECT TOP 100 b.email, c.code, d.optInEnews, d.optInLectures, d.optInTeachers, d.optInNightlife from contactsInterests a
                inner join contacts b on a.contactid = b.id
                inner join interests c on a.interestid = c.id
                left join interestOptOut d on b.email = d.email
                WHERE a.lastUploaded IS NULL AND d.optInEnews = 'no' ORDER BY b.email
            </value>
        </property>
        -->
        <property name="sqlUpdate">
            <value>
                update contactsInterests set lastUploaded = getdate() where contactid = (select max(id) from contacts where email = ?) and lastUploaded is null
            </value>
            <!--
            <value>
                update interestNulls set lastUploaded = getdate() where email = ?
            </value>
            -->
        </property>
        <!--
        <property name="sqlUpdate">
            <value>
                update contacts set luInterests = getdate() where email = ?
            </value>
        </property>
        <property name="sqlUpdate">
            <value>
                update interestNulls set lastUploaded = getdate() where email = ?
            </value>
        </property>
        -->
    </bean>

    <bean id="serviceMarketo" class="co.launchable.api.marketo.ServiceMarketo">
        <property name="dataSource" ref="dataSourceContacts"/>
        <property name="errorCaptureCommand" value="tail /opt/apache-tomcat-7.0.59/logs/catalina.out"/>
    </bean>

    <bean id="jaxb2Marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="co.launchable.api.viator.xml"/>
    </bean>

    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <util:list id="beanList">
                <ref bean="stringHttpMessageConverter"/>
                <ref bean="marshallingHttpMessageConverter"/>
            </util:list>
        </property>
    </bean>

    <bean id="stringHttpMessageConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter"/>

    <bean id="marshallingHttpMessageConverter"
          class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
        <property name="marshaller" ref="jaxb2Marshaller" />
        <property name="unmarshaller" ref="jaxb2Marshaller" />
    </bean>

    <bean id="apiSyncOpportunities" class="co.launchable.api.marketo.ApiSyncOpportunities">
        <property name="dataSource" ref="dataSourceContacts"/>
    </bean>

    <task:scheduled-tasks scheduler="marketoScheduler">
        <task:scheduled ref="serviceMarketo" method="executeDailyProcesses" cron="0 0 3 * * MON-SAT"/>
        <task:scheduled ref="serviceMarketo" method="executeWeeklyProcesses" cron="0 0 3 * * SUN"/>
        <!--<task:scheduled ref="apiGetDeletedLeads" method="process" cron="0 14 3 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="calculateDuplicates" cron="0 30 3 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="calculateUpdatedLeads" cron="0 45 3 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingLeads" cron="0 0 4 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingConstituents" cron="0 30 4 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingOrders" cron="0 45 4 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingOrderDetails" cron="0 0 5 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingVisitations" cron="0 15 5 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingEvents" cron="0 0 6 * * *"/>-->
        <!--<task:scheduled ref="apiSyncUpdatedInterests" method="execute" cron="0 15 6 * * *"/>-->
        <!--<task:scheduled ref="apiMergeDuplicateLeads" method="execute" cron="0 0 7 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="calculateUpdatedLeads" cron="0 15 7 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingLeads" cron="0 30 7 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingOrders" cron="0 45 7 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingOrderDetails" cron="0 50 7 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="syncPendingVisitations" cron="0 55 7 * * *"/>-->

        <!--<task:scheduled ref="apiSyncOpportunities" method="execute" cron="0 0 8 * * *"/>-->
        <!--<task:scheduled ref="apiSyncOpportunities" method="linkFailedOpportunities" cron="0 15 8 * * *"/>-->

        <!--<task:scheduled ref="serviceMarketo" method="syncPruneStatuses" cron="0 20 8 * * *"/>-->

        <!--<task:scheduled ref="serviceMarketo" method="sendEmailReport" cron="0 30 8 * * *"/>-->
        <!--<task:scheduled ref="serviceMarketo" method="sendDuplicatesReport" cron="0 30 8 * * *"/>-->
        <!--
        <task:scheduled ref="serviceMarketo" method="updateBadLeads" cron="0 19 22 * * *"/>
        <task:scheduled ref="serviceMarketo" method="testTailGrab" cron="0 42 12 * * *"/>
        -->
    </task:scheduled-tasks>

    <task:scheduler id="marketoScheduler" pool-size="10"/>
</beans>